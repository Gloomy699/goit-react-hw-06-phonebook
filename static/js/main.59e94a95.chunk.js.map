{"version":3,"sources":["Components/App.module.css","redux/phonebook/phonebook-actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","phone","payload","id","uuidv4","deleteContact","changeFilter","INITIAL_STATE","ContactForm","contacts","onAddContact","useState","state","setState","handleChange","target","value","prevState","reset","onFindName","filter","contact","className","onSubmit","evt","preventDefault","length","toast","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","htmlFor","type","onChange","defaultProps","connect","status","phonebook","dispatch","phonebookActions","findName","ContactList","removeContactId","map","onClick","filterContacts","toLowerCase","startsWith","Filter","onFilter","e","App","s","myPhonebook","bigHeader","smallHeader","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","ReactDOM","render","loading","document","querySelector"],"mappings":"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","file":"static/js/main.59e94a95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3hOuJ\",\"myPhonebook\":\"App_myPhonebook__2CXH-\",\"bigHeader\":\"App_bigHeader__3jdfE\",\"smallHeader\":\"App_smallHeader__rZByT\"};","import { createAction } from '@reduxjs/toolkit';\nimport types from './phonebook-types';\nimport { v4 as uuidv4 } from 'uuid';\n\n\n\nconst addContact = createAction('phonebook/add', (name, phone)=>{\n    return {\n        payload:{\n            id:uuidv4(),\n            name:name,\n            phone:phone\n        }\n    }\n});\nconst deleteContact = createAction('phonebook/delete')\nconst changeFilter = createAction('phonebook/changeFilter')\n\nexport default{\n    addContact,\n    deleteContact,\n    changeFilter\n}","import React, { useState } from 'react';\nimport './ContactForm.css';\n// import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { connect } from 'react-redux';\nimport phonebookActions from '../../redux/phonebook/phonebook-actions';\n\n\nconst INITIAL_STATE = {\n    name:\"\",\n    phone:\"\"\n}\n\nconst ContactForm = ({ contacts, onAddContact }) => {\n\n    const [state, setState] = useState({...INITIAL_STATE})\n    const {name, phone} = state;\n\n\n    const handleChange = ({target}) => {\n        const { name, value } = target;\n        \n        setState(prevState => ({...prevState, [name]:value}))\n    }\n\n    const handleSubmit = evt =>{\n        evt.preventDefault();\n\n\n        if(!name || !phone){\n            toast.error(\"Упс. Строка имя или телефон пуста!\", {\n                position: \"top-left\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                });\n            return false; \n        }\n\n        if(onFindName(name).length !== 0){\n            toast.warn(name + ' Уже добавлено в контакты.', {\n                position: \"top-left\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                });\n            return false;\n        }\n\n        onAddContact(name, phone);\n\n        reset();\n    }\n\n\n    const reset = () => {\n        setState({ ...INITIAL_STATE });\n    };\n\n    const onFindName = (name) =>{\n        return contacts.filter(contact => contact.name === name)\n    }\n\n    return (\n        <>\n        <form className=\"phonebook\" onSubmit={handleSubmit}>\n            <label htmlFor=\"name_1\">Имя</label><br/>\n            <input type=\"text\" name=\"name\" id=\"name_1\" value={name} onChange={handleChange}/>\n            <br/>\n            <label htmlFor=\"phone_1\">Номер</label><br/>\n            <input type=\"tel\" name=\"phone\" id=\"phone_1\" value={phone} onChange={handleChange}/>\n            <br/>\n            <br/>\n            <button type=\"submit\">Добавить контакт</button>\n        </form>\n        <ToastContainer />\n        </>\n\n    );\n    \n}\n\nContactForm.defaultProps = {\n    contacts:[],\n    onAddContact:()=>{}\n}\n\nContactForm.propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onAddContact:PropTypes.func\n}\n \nconst mapStateToProps = status => ({\n    contacts:status.phonebook.contacts\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onAddContact: (name, phone) => dispatch(phonebookActions.addContact(name, phone)),\n    onFindName: name => dispatch(phonebookActions.findName(name))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm)","\n\nimport React from 'react';\nimport  PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport phonebookActions from '../../redux/phonebook/phonebook-actions';\nimport './ContactList.css';\nconst ContactList = ({ contacts, removeContactId }) => {\n\n    return(\n            <ul>\n                {\n                    contacts.map(({id, name, phone}) => (\n                        <li key={id}><span> {name}: {phone} </span><button className=\"contactDelBtn\" onClick={()=>{removeContactId(id)}}>Удалить</button> </li>\n                    ))\n                }\n            </ul>\n    )\n}\n\nContactList.defaultProps = {\n    contacts:[],\n    removeContactId:() =>{}\n}\nContactList.propTypes = {\n    contacts:PropTypes.array.isRequired,\n    removeContactId:PropTypes.func\n}\n\nconst filterContacts = (filter, contacts)=>{\n    return contacts.filter(contact => contact.name.toLowerCase().startsWith(filter.toLowerCase()))\n}\n\nconst mapStateToProps = state =>{\n    const {filter, contacts} = state.phonebook;\n\n    return { contacts: filterContacts(filter, contacts)}\n}\n\nconst mapDispatchToProps = dispatch =>({\n    removeContactId: id => dispatch(phonebookActions.deleteContact(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)","import React from 'react'\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport phonebookActions from '../../redux/phonebook/phonebook-actions';\nimport './Filter.css';\n\n\nconst Filter = ({filter, onFilter}) => {\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n    }\n\n    return(\n        <form className=\"phoneList\"\n            onSubmit={handleSubmit}>\n            <label htmlFor=\"filter_1\">Поиск покнтакта по имени</label><br/>\n            <input type=\"text\" name=\"filter\" id=\"filter_1\" value={filter}  onChange={onFilter} />\n        </form>\n    );\n}\n\nFilter.defaultProps = {\n    filter:'',\n    onFilter:()=>{}\n}\nFilter.propTypes = {\n    filter:PropTypes.string.isRequired,\n    onFilter:PropTypes.func\n}\n\nconst mapStateToProps = state => ({\n    filter:state.phonebook.filter\n});\n\nconst  mapDispatchToprops = dispatch =>({\n    onFilter: e => dispatch(phonebookActions.changeFilter(e.target.value))\n})\n\nexport default connect(mapStateToProps, mapDispatchToprops)(Filter)","// import React, { useMemo, useState } from 'react';\nimport ContactForm from './ContactForm/ContactForm'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\nimport s from './App.module.css';\n\n// import useLocalStorage from './../hooks/useLocalStorage';\n\n\nexport default function App(){\n    return (\n        <>\n            <div className={s.myPhonebook}>\n                 <h1 className={s.bigHeader}>Моя телефонная книга</h1>\n            <h2 className={s.smallHeader}>Добавить контакт</h2>\n            <ContactForm />\n\n            <h2 className={s.smallHeader}>Мои контакты</h2>\n            <Filter/>\n            <ContactList />\n        </div> \n\n        </>\n    );\n}","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\n// import types from './../phonebook/phonebook-types';\nimport actions from './phonebook-actions';\n\n// const contacts = (state = [], {type, payload}) =>{\n//     switch(type){\n//         case types.ADD:\n//             return [...state, payload]\n        \n//         case types.DELETE:\n//             return state.filter( ({id}) => id !== payload)\n        \n//         default:\n//             return state\n//     }\n    \n// }\n\n// const filter = (state = '', {type, payload}) =>{\n//     switch(type){\n//         case types.CHANGE_FILTER:\n//             return payload;\n\n//         default:\n//             return state;       \n//     }\n// }\n\nconst contacts = createReducer([], {\n    [actions.addContact]: (state, {payload}) => [...state, payload],\n    [actions.deleteContact]: (state, {payload}) => state.filter( ({id}) => id !== payload)\n})\n\nconst filter = createReducer('', {\n    [actions.changeFilter]: (_, {payload}) => payload\n})\n\nexport default combineReducers({\n    contacts,\n    filter\n})","import { combineReducers, createStore } from 'redux'\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport phonebookReducer from './../redux/phonebook/phonebook-reducer'\nimport logger from 'redux-logger'\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER\n  } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }), logger]\n\nconst persistConfig = {\n    key: 'phonebook',\n    storage,\n    blacklist:['filter']\n  }\n   \n\nconst store = configureStore({\n\n    reducer:{\n        phonebook:persistReducer(persistConfig, phonebookReducer)\n    },\n    middleware,\n    devTools:process.env.NODE_ENV === 'development'\n})\n\nconst persistor = persistStore(store)\n\nexport default {store, persistor};","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n    <Provider store={store.store}>\n        <PersistGate loading={null} persistor={store.persistor}>\n            <App/>\n        </PersistGate>\n    </Provider>, \ndocument.querySelector('#root'));"],"sourceRoot":""}